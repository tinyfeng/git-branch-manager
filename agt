#!/usr/bin/env ruby
require 'json'
require 'optparse'
require 'open3'
main_keys = %w(ps lst)
options = {}
HOME_PATH = `eval echo "~$different_user"`.chomp
FILE_PATH = "#{HOME_PATH}/git_branch.conf"
OptionParser.new do |opts|
  opts.banner = "Usage: example.rb [options]"
  opts.on("-l", "--[no-]list", "list branchs") { |l| options[:list] = l }
  opts.on("-d", "--del_branch=DEL_BRANCH", "delete branch name") { |d| options[:del_branch] = d }
  opts.on("-s", "--swich=WHICH_BRANCH", "swich branch") { |s| options[:swich] = s }
end.parse!

`echo {} >> #{FILE_PATH}` unless File.file? FILE_PATH
conf_file = File.open(FILE_PATH)
$git_conf = JSON.parse(conf_file.read) || {}
REPO_NAME = `basename \`git rev-parse --show-toplevel\``.strip
def fix_config
  ($git_conf[REPO_NAME] || {}).each do |k, v|
    $git_conf[REPO_NAME].delete(k) unless v
  end
  write_file
end

def write_conf branch_name, message
  message ||= ''
  config = [Time.now.strftime("%Y.%m.%d"), message]
  $git_conf[REPO_NAME] = ($git_conf[REPO_NAME] || {}).merge!({ branch_name => config })
  write_file
end

def write_file
  File.open(FILE_PATH, 'w') { |file| file.write($git_conf.to_json) }
end

def list_branch
  # puts "branch: message\n\n"
  config_with_time = {} # 后续加的分支时间，为了兼容
  count = 0
  ($git_conf[REPO_NAME] || {}).each do |k, v|
    next unless v
    if v.is_a? String
      count += 1
      puts "#{count}  #{k}:  #{v}" 
    else
      config_with_time.merge! k => v
    end
  end
  puts "time --- branch: message\n\n"
  config_with_time.each do |k, v|
    count += 1
    puts "#{count}  #{v[0]} --- #{k}:  #{v[1]}"
  end
end

def delete_conf num
  delete_branch = $git_conf[REPO_NAME].to_a[num.to_i - 1][0]
  system("git branch -D #{delete_branch}") && $git_conf[REPO_NAME].delete(delete_branch)
  write_file
end

def switch_branch branch_name, message = ''
  system("git checkout #{branch_name}") || system("git checkout -b #{branch_name}")
  write_conf branch_name, message
end

def swich_branch_by_num num
  system("git checkout #{$git_conf[REPO_NAME].to_a[num.to_i - 1][0]}")
end

fix_config
list_branch if options[:list]
delete_conf options[:del_branch] if options[:del_branch]
swich_branch_by_num options[:swich] if options[:swich]
if ARGV[0] 
  if !main_keys.include?(ARGV[0])
     switch_branch ARGV[0], (ARGV[1] || '')
  elsif ARGV[0] == 'ps'
    current_branch_name = `git rev-parse --abbrev-ref HEAD`.chomp
    message = Open3.capture3("git push  --set-upstream origin #{current_branch_name}")[1]
    url = message.split("\n")&.select{|i| i.include? 'http'}&.first&.split(' ')&.[](1)
    system ("open #{url}") if url
  elsif ARGV[0] == 'lst'
    puts 'lst'
    last_branch_name = $git_conf[REPO_NAME].to_a.last&.first&.to_s
    puts '无记录的分支' unless last_branch_name || last_branch_name.empty?
    system "git checkout #{last_branch_name}"
  end
end
